https://docs.google.com/document/d/1xsO9ylS_mNdfVgdKJlBLN5ALtL_oPuCCIc7bX4vj0po/edit


1강

운영체제 강의 목적

운영체제는 컴퓨터 하드웨어 바로 위에 설치되는 소프트웨어 계층으로서 모든 컴퓨터 시스테의 필수적인 부분. 이와 같은 운영체제의 개념과 역할, 운영체제를 구성하는 요소 및 그 알고리즘의 핵심적인 부분에 대해 학습.

강의 내용

운영체제 개요
컴퓨터 시스템의 구조
프로세스 관리
CPU 스케줄링
병행 제어
데드락
메모리 관리
가상 메모리
파일 시스템
입출력 시스템
디스크 관리

운영체제란 무엇인가?

컴퓨터 하드웨어 바로 옆에 설치되어 사용자 및 다른 모든 소프트웨어와 하드웨어를 연결하는 소프트웨어 계층

운영체제의 목표

컴퓨터 시스템을 편리하게 사용할 수 있는 환경을 제공
컴퓨터 시스템의 자원을 효율적으로 관리

2강

운영체제는 작은 의미로 커널만을 의미, 큰 의미로는 IO device 등을 포함.
주어진 자원으로 최대한의 성능을 내도록 함.

과거에는 single tasking 이었으나 (ms-dos) 발전하며 multi tasking을 처리할 수 있게 됨(unix, windows)

처리 방식 

일괄 처리 방식은 작업 요청의 일정량을 모아서 한꺼번에 처리하는 것. 작업이 완전 종료될 때 까지 기다려야함. 현재는 쓰지 않는 방식

시분할 방식은 여러 작업을 수행할 때 컴퓨터 처리 능력을 일정한 시간 단위로 분할하여 사용하는 방식. 일괄 처리 시스템에 비해 짧은 응답 시간을 가지기 때문에 interactive함.

실시간 방식은 정해진 시간안에 어떠한 일이 반드시 종료되어야 함이 보장됨. 원자로 공장 제어, 미사일 제어, 반도체 제어, 로보트 제어 등에 사용됨. 실시간 방식은 그 보장됨의 정도가 soft한지 hard한지 로 경성 실시간 시스템, 연성 시스템 시스템으로 나뉨.

용어 설명

Multitasking은 하나의 프로그램이 끝나기 전 다른 프로그램이 실행되어져서 동시에 실행되는 것 처럼 보이는 방식

Multiprogramming은 여러 프로그램이 메모리에 있음을 강조.

Time Sharing은 CPU를 시간을 분할하여 쓰는 의미를 강조

Multiprocessor 는 하나의 컴퓨터에 cpu가 여러개 있음을 의미

운영체제의 예

UNIX 코드의 대부분을 c로 작성. 높은 이식성, 최소한의 커널 구조, 복잡한 시스템에 맞게 확장 용이, 소스코드 공개, 프로그램 개발에 용이, LINUX, SOLARIS, SYSTEM V, FREEBSD, SUNOS,..

MS WINDOWS MS사의 다중 작업용 GUI기반 운영 체제

운영체제는 크게 CPU 스케줄링, 메모리 관리, 파일 관리, 입출력 관리가 중요한 이슈.

















3강

컴퓨터 시스템의 구조

Mode bit : 지금 시스템을 사용하는 것이 프로그램인지 운영체제인지를 구분
Timer : 특정 프로그램이 cpu를 독점하지 않도록 함.
I/O device controller : 해당 i/o 장치 유형을 관리하는 작은 cpu. 제어 정보를 위해 control regisrer, status register를 가짐. Local buffer를 가짐. i/o 끝나면 interrupt로cpu에 그 사실을 알림

사용자 프로그램이 i/o를 하기 위해 시스템 콜이라는 것을 사용.

인터럽트: 인터럽트 당한 시점의 레지스터와 program counter를 save한 후 cpu제어를 인터럽트 체어 루틴에 넘김. 인터럽트에서도 소프트웨어 인터럽트(trap)는 exception과 system call로나뉨.

4강

동기식 입출력 : i/o 요청 후 입출력 작업이 완료된 후에야 제어가 사용자 프로그램에 넘어감.
비동기식 입출력 : i/o가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에 즉시 넘어감.
두 경우 모두 i/o 완료는 interrupt를 통해서 함.

DMA controller는 빠른 입출력 장치를 메모리에 가까운 속도로 처리하기 위해 사용.device의 buffer storage를  메모리에 block 단위로 직접 전송. 따라서 interrupt도 block단위 이므로 그 빈도를 낮출 수있음. 



저장 장치 계층 구조

내부 -> 휘발성 
외부-> 비휘발성 

각 프로세스를 실행시키면 메모리는 stack, data, code로 구성됨. 사용자 프로그램을 위한 Virtual memory 에서 필요한 부분만을 physical memory에 올림. 이것을 disk의 memory와 싸는 것을 swap area라 함.

커널 주소 공간의 내용

Code부분이 커널 코드. 시스콜, 인터럽트 처리 코드, 자원 관리를 위한 코드 , 서비스 제공 코드
Data는 각  프로그램의 메모리 주소공간을 관리하는 pcb, 하드웨어 관리
Stack은 각 프로세스의 커널 스택을 갖고 있음.

사용자 프로그램이 사용하는 함수
사용자 정의 함수, 라이브러리 함수, 커널 함수(운영체제 프로그램의 함수), 시스템 콜



문제1. Dma 컨트롤러가 하는일이 무엇인지?
문제2. 메모리의 code, stack, data 가 하는 일에 대해 설명해보기
